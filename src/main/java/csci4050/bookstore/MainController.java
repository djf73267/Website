package csci4050.bookstore;

import java.text.DecimalFormat;

import java.util.Map;
import java.util.UUID;
import java.util.Optional;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.WebAttributes;

import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.web.bind.annotation.AuthenticationPrincipal;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import csci4050.bookstore.EmailService;

import csci4050.bookstore.user.MyUserDetails;

import csci4050.bookstore.user.User;
import csci4050.bookstore.user.CustomerService;

import csci4050.bookstore.cart.Cart;
import csci4050.bookstore.cart.CartService;

import csci4050.bookstore.cart_item.Cart_item;
import csci4050.bookstore.cart_item.Cart_item_id;
import csci4050.bookstore.cart_item.Cart_itemService;


import csci4050.bookstore.address.Address;
import csci4050.bookstore.address.AddressService;

import csci4050.bookstore.promotion.Promotion;
import csci4050.bookstore.promotion.PromotionService;

import csci4050.bookstore.book.Book;
import csci4050.bookstore.book.BookService;

import csci4050.bookstore.paymentcard.Paymentcard;
import csci4050.bookstore.paymentcard.PaymentcardService;

import csci4050.bookstore.order.Order;
import csci4050.bookstore.order.OrderService;

import csci4050.bookstore.order_record.Order_record;
import csci4050.bookstore.order_record.Order_record_id;
import csci4050.bookstore.order_record.Order_recordService;



@Controller // This means that this class is a Controller
//@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  //private CustomerRepository customerRepository;
  private CustomerService customerService;
  private AddressService addressService;
  private EmailService emailService;
  private PaymentcardService paymentService;
  private BCryptPasswordEncoder bCryptPasswordEncoder;
  private BookService bookService;
  private PromotionService promotionService;
  private CartService cartService;
  private Cart_itemService cart_itemService;
  private OrderService orderService;
  private Order_recordService order_recordService;
  
  @Autowired
    public MainController(BCryptPasswordEncoder bCryptPasswordEncoder, CustomerService customerService, AddressService addressService, EmailService emailService, PaymentcardService paymentService, BookService bookService, PromotionService promotionService, CartService cartService, Cart_itemService cart_itemService, OrderService orderService, Order_recordService order_recordService) {
      
      this.bCryptPasswordEncoder = bCryptPasswordEncoder;
      this.customerService = customerService;
	    this.addressService = addressService;
      this.emailService = emailService;
      this.paymentService = paymentService;
      this.bookService = bookService;
      this.promotionService = promotionService;
      this.cartService = cartService;
      this.cart_itemService = cart_itemService;
      this.orderService = orderService;
      this.order_recordService = order_recordService;

    } 


  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String username, @RequestParam String password,
      @RequestParam String firstname, @RequestParam String lastname, @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setUsername(username);
    n.setPassword(password);
    n.setFirstname(firstname);
    n.setLastname(lastname);
    n.setEmail(email);
    //customerRepository.save(n);
    return "Saved";
  }


  /*
 //@PostMapping(path="/register")/
 @RequestMapping(value = "/reg", method = RequestMethod.POST)
 public String signup(@ModelAttribute("customer") Customer c){
    System.out.println("" + c.getUsername());
    return "success";
 }
*/


@RequestMapping(value="/", method = RequestMethod.GET)
public ModelAndView redirectHome(ModelAndView modelAndView){
	modelAndView.setViewName("redirect:home");

	return modelAndView;
}


 @RequestMapping(value="/register", method = RequestMethod.GET)
 public ModelAndView showRegistrationPage(ModelAndView modelAndView, User customer, Address address, Paymentcard paymentcard){
   modelAndView.addObject("customer", customer);
   modelAndView.addObject("address", address);
   modelAndView.addObject("paymentcard", paymentcard);
   

   modelAndView.setViewName("register");
   return modelAndView;
 }


  // Process form input data
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ModelAndView processRegistrationForm(ModelAndView modelAndView, User customer, Address address, Paymentcard paymentcard, BindingResult bindingResult, HttpServletRequest request) {
				
		// Lookup customer in database by username
    User customerExists = customerService.findByUsername(customer.getUsername());
    
    // Lookup customer in database by email
    Optional<User> customerExists_email = customerService.findUserByEmail(customer.getEmail());
    //Address addressExists = addressService.findById(customer.getAddressID());

		
	//	System.out.println(userExists);
		
		if (customerExists != null) {
			modelAndView.addObject("alreadyRegisteredMessage", "Oops!  There is already a user registered with the username provided.");
			modelAndView.setViewName("register");
			bindingResult.reject("username");

			return modelAndView;
    }

    if(customerExists_email.isPresent()){
      modelAndView.addObject("alreadyRegisteredEmail", "This email address is already taken!");
      modelAndView.setViewName("register");
      return modelAndView;
    }
    

			
		if (bindingResult.hasErrors()) { 
			modelAndView.setViewName("register");		
		} else { // new user so we create user and send confirmation e-mail
					
			// Disable user until they click on confirmation link in email
		   //customer.setEnabled(false);
        
        addressService.saveAddress(address); // save address object in database

        paymentcard.setAddress_id(address.getId());
        
        

		    // Generate random 36-character string token for confirmation link
		    customer.setConfirmationToken(UUID.randomUUID().toString());
		        
		    //customerService.saveCustomer(customer);

        //System.out.println(customer.getPassword());
        String encodedPassword = bCryptPasswordEncoder.encode(customer.getPassword()); // encrypt password using BCrypt
        customer.setPassword(encodedPassword); // set customer's password to encrypted version
        
        customer.setUserstatus_id(1); // set initial status to inactive
        customer.setUsertype_id(2); // set user as customer

        

        //System.out.println("Address id: " + address.getId());
        customer.setAddressID(address.getId()); // Associate address with user object

        //System.out.println("customer address id:" + customer.getAddressID());

        customerService.saveCustomer(customer);  // save customer object in database

        paymentcard.setUser_username(customer.getUsername());
        paymentService.savePaymentcard(paymentcard); // save paymentcard object in database
        			
        String appUrl = request.getScheme() + "://" + request.getServerName();
        
        SimpleMailMessage registrationEmail = new SimpleMailMessage();
        registrationEmail.setTo(customer.getEmail());
        registrationEmail.setSubject("Bookstore Registration Confirmation");
        registrationEmail.setText("To confirm your e-mail address, please click the link below:\n"
            + appUrl + ":8080/verify?token=" + customer.getConfirmationToken() + "\n Your confirmation token is " + customer.getConfirmationToken() + ".");
        registrationEmail.setFrom("noreply@domain.com");
        
        emailService.sendEmail(registrationEmail);
        
        modelAndView.addObject("confirmationMessage", "A confirmation e-mail has been sent to " + customer.getEmail());
        modelAndView.setViewName("registration_confirmation"); // redirect to confirmation page
        
      
		}
			
		return modelAndView;
  }
  
/*
  @RequestMapping(value = "/register/confirm", method = RequestMethod.GET)
  public ModelAndView loadRegistrationConfirmation(ModelAndView modelAndView, BindingResult bindingResult) {
    modelAndView.setViewName("registration_confirmation");
    return modelAndView;
  }
  */

  @RequestMapping(value = "/home", method = RequestMethod.GET)
  public ModelAndView loadHomepage(ModelAndView modelAndView, BindingResult bindingResult) {

    // Add books to display on the homepage
    //List<Book> books = bookService.findAll();
    List<Book> books = bookService.findAllByOrderByIdDesc();
  

    modelAndView.addObject("books", books);




    modelAndView.setViewName("base");
    return modelAndView;
  }

  @RequestMapping(value = "/login", method = RequestMethod.GET)
  public ModelAndView loadLoginpage(ModelAndView modelAndView, BindingResult bindingResult) {
    Authentication auth = SecurityContextHolder.getContext().getAuthentication();

    if (!(auth instanceof AnonymousAuthenticationToken)) {

      /* The user is logged in */
      return new ModelAndView("redirect:home");
    }

    
  








    modelAndView.setViewName("login");
    return modelAndView;
  }

  @RequestMapping(value = "/login_failure", method = RequestMethod.GET)
  public ModelAndView loadLoginfailurepage(@RequestParam("error") String errorMessage, HttpServletRequest request, ModelAndView modelAndView, BindingResult bindingResult, @AuthenticationPrincipal MyUserDetails customerDetails) {
     
    String error = null;

    if(errorMessage.equals("invalid")){
       error = "Invalid username/password. Please try again.";
     }else if(errorMessage.equals("suspended")){
       error = "This user has been suspended by the administrator.";
     }else{
       error = "An unknown error has occurred.";
     }
       
    modelAndView.addObject("errorMessage", error);
    modelAndView.setViewName("login");
    return modelAndView;
  }


@RequestMapping(value="/logout", method = RequestMethod.GET)
public ModelAndView logout(ModelAndView modelAndView){
	modelAndView.setViewName("redirect:home");

	return modelAndView;
}

@RequestMapping(value = "/admin", method = RequestMethod.GET)
  public ModelAndView loadAdminpage(ModelAndView modelAndView, BindingResult bindingResult) {
    modelAndView.setViewName("admin");
    return modelAndView;
  }


  @RequestMapping(value = "/admin/manage/books", method = RequestMethod.GET)
  public ModelAndView loadAdminAddBooks(ModelAndView modelAndView, BindingResult bindingResult) {
    modelAndView.setViewName("addbook");
    return modelAndView;
  }



  @RequestMapping(value = "/admin/manage/books/add", method = RequestMethod.POST)
  public ModelAndView adminSubmitBook(ModelAndView modelAndView, Book book) {

    book.setCover_picture("/images/books/" + book.getISBN() + ".jpg");
    bookService.saveBook(book);

    modelAndView.addObject("addBook", "Book added successfully.");

    modelAndView.setViewName("addbook");
    return modelAndView;
  }


  
  @RequestMapping(value = "/book/{ISBN}", method = RequestMethod.GET)
  public ModelAndView viewBook(ModelAndView modelAndView, @PathVariable("ISBN") String ISBN) {
    Book book = bookService.findByISBN(ISBN);

    if(book == null){ // did not find a book with this ISBN
      modelAndView.setViewName("home");
      return modelAndView;
    }else{
      modelAndView.addObject("book", book);
    }

    modelAndView.setViewName("book");
    return modelAndView;
  }


  @RequestMapping(value = "/search", method = RequestMethod.GET)
  public ModelAndView searchBooks(ModelAndView modelAndView, @RequestParam(value = "sortby", defaultValue="title", required = false) String category, @RequestParam(value = "query", defaultValue="title", required = false) String query) {
  
    switch(category){ // sort by category ascending
      case "title":
        
        
        List<Book> books = bookService.findAllByOrderByTitleAsc();
        modelAndView.addObject("books", books);
        modelAndView.addObject("query", query);
        
        break;
    }
      

    modelAndView.setViewName("bookresults");
    return modelAndView;
  }



@RequestMapping(value = "/user/addtocart", method = RequestMethod.POST)
  public ModelAndView addBookToCart(ModelAndView modelAndView, @AuthenticationPrincipal MyUserDetails customerDetails, @RequestParam(value = "book_id", required = true) String book_id, @RequestParam(value = "quantity", defaultValue="1", required = true) Integer quantity) {
  
    if(cart_itemService.findById(new Cart_item_id(customerDetails.getCart_id(), Integer.parseInt(book_id))) == null){ // cart_item doesn't exist yet
       // Make composite key of cart_item; needs logged-in user's cart_id and the id of book to add)
      Cart_item_id id = new Cart_item_id(customerDetails.getCart_id(), Integer.parseInt(book_id));

      // Make the cart_item
      Cart_item cart_item = new Cart_item(id, quantity);
      cart_itemService.saveCart_item(cart_item);

        modelAndView.setViewName("redirect:/home");
        return modelAndView;
    }else{
 
        Cart_item_id id = new Cart_item_id(customerDetails.getCart_id(), Integer.parseInt(book_id));
        Cart_item cart_item = cart_itemService.findById(id);
        cart_item.setQuantity(quantity);
        cart_itemService.saveCart_item(cart_item);

        modelAndView.setViewName("redirect:/cart");
        return modelAndView;
    }

   

    //Book book = bookService.findById(Integer.parseInt(id));


    //System.out.println("This book's id is = " + book.getId());


    
  }




@RequestMapping(value = "/checkout", method = RequestMethod.GET)
  public ModelAndView checkout(ModelAndView modelAndView, @AuthenticationPrincipal MyUserDetails customerDetails, Address address, Paymentcard card, BindingResult bindingResult) {

    List<Cart_item> itemlist = cart_itemService.findAllByIdCartid(customerDetails.getCart_id());
    Book books[] = new Book[itemlist.size()]; // Also need list of books to display cover pic, title, etc...

    // Get books from cart_items (for review section) and calculate total price of cart
    int i = 0;
    double totalprice = 0;
    int numresults = 0;
    for(Cart_item cart_item : itemlist){
      Book book = bookService.findById(cart_item.getId().getBook_id());
      books[i] = book;
      totalprice += (book.getPrice() * cart_item.getQuantity());
      numresults += cart_item.getQuantity();
      i++;
    }


    // get address and paymentcard of logged in user (null if doesn't exist)
    address = customerDetails.getAddress();
    card = customerDetails.getPaymentcard();
  

    // calculate tax
    DecimalFormat decim = new DecimalFormat("0.00");
    String stax = decim.format(Math.round((totalprice * 0.07) * 100.0) / 100.0);


    // Get promotions
    List<Promotion> promolist = promotionService.listAll();
    
    modelAndView.addObject("address", address);
    modelAndView.addObject("card", card);
    
    modelAndView.addObject("user", customerDetails.getUser());

    modelAndView.addObject("promolist", promolist);
    modelAndView.addObject("totalprice", totalprice);
    modelAndView.addObject("grandtotal", totalprice * 1.07);
    modelAndView.addObject("tax", stax);
    modelAndView.addObject("books", books);
    modelAndView.addObject("itemlist", itemlist);
    modelAndView.addObject("numresults", numresults);
    modelAndView.setViewName("checkout");
    return modelAndView;
  }


  @RequestMapping(value = "/checkout", method = RequestMethod.POST)
  public ModelAndView placeOrder(ModelAndView modelAndView, BindingResult bindingResult, @AuthenticationPrincipal MyUserDetails customerDetails, User customer, Paymentcard card, Address address, @RequestParam(value = "promocode", required = false) String promocode) {
 
    // Get cart items
    List<Cart_item> itemlist = cart_itemService.findAllByIdCartid(customerDetails.getCart_id());


    // Calculate total price of cart before tax
    double totalprice = 0;
    double promodiscount = 0;
    for(Cart_item cart_item : itemlist){
      Book book = bookService.findById(cart_item.getId().getBook_id());
      totalprice += (book.getPrice() * cart_item.getQuantity());

      if(promocode != null){ // a promo has been applied
        Promotion promotion = promotionService.findByPromoName(promocode);
        if(promotion != null){ // check if valid promocode
          if(book.getPromotion_id() != null){ // check if book has a promo applied
            int promoid = promotion.getId().intValue();
            int bookpromoid = book.getPromotion_id().intValue();
          
            if(promoid == bookpromoid){ // book is in promotion
              promodiscount = promodiscount + ((promotion.getAmount().intValue()/100.0) * book.getPrice().intValue() * cart_item.getQuantity().intValue());
            }
          }
          
        }
        
      }

  
    }
    totalprice -= promodiscount; // apply promo
  
    // Apply tax
    totalprice = Math.round((totalprice * 1.07) * 100.0) / 100.0;
  

    /* #################### */
    // Create a new order
    /* #################### */
    Order order = new Order();
    order.setTotal(totalprice);
    order.setCardnum(card.getCardNum());
    order.setUsername(customerDetails.getUsername());
    // Create address for order
    Address orderAddress = new Address();
    orderAddress = address;
    orderAddress.setCountry("United States");
    addressService.saveAddress(orderAddress);
    order.setAddress_id(orderAddress.getId());

    // Get the current date
    java.sql.Date sqlDate = new java.sql.Date(System.currentTimeMillis());
    order.setDate(sqlDate);


    // Save the order
    orderService.saveOrder(order);

    // Save the order
    orderService.saveOrder(order);

     System.out.println("ORDER SAVED");

    /* ##################### */
    // Create order records
    /* ##################### */
    for(Cart_item cart_item : itemlist){
      Book book = bookService.findById(cart_item.getId().getBook_id());
      Order_record_id id = new Order_record_id(order.getId(), book.getId());
      Order_record order_record = new Order_record(id, cart_item.getQuantity());
      order_recordService.saveOrder_record(order_record);
      
    }
    


    // Delete cart items
    for(Cart_item cart_item : itemlist){
      cart_itemService.deleteById(cart_item.getId());
    }



    modelAndView.setViewName("redirect:/orderhistory");
    return modelAndView;
}



@RequestMapping(value = "/user/removeitem", method = RequestMethod.POST)
  public ModelAndView removeCartItem(ModelAndView modelAndView, BindingResult bindingResult, @RequestParam(value = "cartid", required = true) String cartid, @RequestParam(value = "bookid", required = true) Integer bookid) {


    Cart_item_id cart_item_id = new Cart_item_id(Integer.parseInt(cartid), bookid);
    // cart_itemService.findById(cartid);
    
    cart_itemService.deleteById(cart_item_id);



    modelAndView.setViewName("redirect:/cart");
    return modelAndView;
}
  




  @RequestMapping(value = "/admin/manage/users", method = RequestMethod.GET)
  public ModelAndView loadAdminManageUsers(ModelAndView modelAndView, BindingResult bindingResult) {
    modelAndView.setViewName("manageusers");
    return modelAndView;
  }
 
  @RequestMapping(value = "/admin/manage/addpromo", method = RequestMethod.GET)
  public ModelAndView loadAdminManagePromotions(ModelAndView modelAndView, BindingResult bindingResult, Model model) {

    List<Promotion> listPromo = promotionService.listAll();
    model.addAttribute("listPromo", listPromo);
     
    modelAndView.setViewName("addpromo");

    return modelAndView;
  }

  @RequestMapping(value = "/admin/manage/addpromo", method = RequestMethod.POST)
	public ModelAndView setNewPromo(ModelAndView modelAndView, @RequestParam Map<String, String> requestParams, RedirectAttributes redir, HttpServletRequest request, Promotion promo) {

    promotionService.savePromotion(promo);
    modelAndView.setViewName("redirect:/admin/manage/addpromo");
		return modelAndView;
   }


   @RequestMapping(value = "/admin/manage/sendEmail/{id}")
   public ModelAndView sendEmailPromo(@PathVariable(name = "id") int id, ModelAndView modelAndView) {
     
     //List<User> listCustomer = customerService.listAll();
     List<User> listCustomer = customerService.findByPromostatus(true);
     Promotion promo = promotionService.findById(id);
 
     SimpleMailMessage promoEmail = new SimpleMailMessage();
 
     promoEmail.setSubject("New Promo");
     promoEmail.setText("A new promotion is now active:\n"
         + "Use promo code " + promo.getPromoName() + " for " + promo.getAmount() + "% off!");
     promoEmail.setFrom("noreply@domain.com");
     
     for(User c: listCustomer){
       promoEmail.setTo(c.getEmail());
       emailService.sendEmail(promoEmail);
   }
 
 
     modelAndView.setViewName("redirect:/admin/manage/addpromo"); // redirect to login page
     
      return modelAndView;
     }
 


@RequestMapping(value = "/admin/manage/users/search", method = RequestMethod.GET)
  public ModelAndView loadAdminUserSearch(ModelAndView modelAndView, @RequestParam(value = "search", required = false) String search) {
    
    if(search != null){
      List<User> users = customerService.findByUsernameStartsWithIgnoreCase(search);
      
      if(users.size() == 0){
        modelAndView.addObject("noResults", "");
        modelAndView.addObject("notFound", "Search did not yield any results!");

      }else{

        modelAndView.addObject("users", users); // add the list of users returned by the query
        modelAndView.addObject("query", search); // add query (for redirecting purposes after suspending/unsuspending)

      }

      
      

    }else{
      modelAndView.addObject("invalidSearch", "Invalid search. Please try again.");
    }

    modelAndView.setViewName("usersearch");
    return modelAndView;
  }


  @RequestMapping(value = "/admin/manage/users/suspend", method = RequestMethod.POST)
  public ModelAndView suspendUser(ModelAndView modelAndView, @RequestParam(value = "user", required = true) String username, @RequestParam(value = "query", required = true) String query) {

   // System.out.println("Suspend user: " + username);

    User user = customerService.findByUsername(username);
    user.setUserstatus_id(3);
    customerService.saveCustomer(user);




    modelAndView.addObject("search", query);
    modelAndView.setViewName("redirect:/admin/manage/users/search");
    return modelAndView;
  }

  @RequestMapping(value = "/admin/manage/users/unsuspend", method = RequestMethod.POST)
  public ModelAndView unsuspendUser(ModelAndView modelAndView, @RequestParam(value = "user", required = true) String username, @RequestParam(value = "query", required = true) String query) {

    //System.out.println("Unsuspend user: " + username);

    User user = customerService.findByUsername(username);
    user.setUserstatus_id(2);
    customerService.saveCustomer(user);




    modelAndView.addObject("search", query); // add original query for redirect
    modelAndView.setViewName("redirect:/admin/manage/users/search"); // redirect back to search results based on above query
    return modelAndView;
  }


  @RequestMapping(value = "/admin/manage/users/demote", method = RequestMethod.POST)
  public ModelAndView demoteAdmin(ModelAndView modelAndView, @RequestParam(value = "user", required = true) String username, @RequestParam(value = "query", required = true) String query) {

    //System.out.println("Unsuspend user: " + username);

    User user = customerService.findByUsername(username);
    user.setUsertype_id(3);
    customerService.saveCustomer(user);




    modelAndView.addObject("search", query); // add original query for redirect
    modelAndView.setViewName("redirect:/admin/manage/users/search"); // redirect back to search results based on above query
    return modelAndView;
  }


  @RequestMapping(value = "/admin/manage/users/promote", method = RequestMethod.POST)
  public ModelAndView promoteEmployee(ModelAndView modelAndView, @RequestParam(value = "user", required = true) String username, @RequestParam(value = "query", required = true) String query) {

    //System.out.println("Unsuspend user: " + username);

    User user = customerService.findByUsername(username);
    user.setUsertype_id(1);
    customerService.saveCustomer(user);




    modelAndView.addObject("search", query); // add original query for redirect
    modelAndView.setViewName("redirect:/admin/manage/users/search"); // redirect back to search results based on above query
    return modelAndView;
  }




  



  // Used to point to url containing the customer's username
  @RequestMapping(value = "/user", method = RequestMethod.GET)
  public ModelAndView redirectUser(@AuthenticationPrincipal MyUserDetails customerDetails, ModelAndView modelAndView, BindingResult bindingResult) {
    modelAndView.setViewName("redirect:/user/" + customerDetails.getUsername());
    return modelAndView;
  }

  @RequestMapping(value = "/user/{username}", method = RequestMethod.GET)
  public ModelAndView loadUserPage(@PathVariable("username") String username, @AuthenticationPrincipal MyUserDetails customerDetails, ModelAndView modelAndView, BindingResult bindingResult) {

    // ensures URL matches the customer's username
    if(!customerDetails.getUsername().equals(username)){
      return new ModelAndView("redirect:/user/" + customerDetails.getUsername());
    }
    modelAndView.addObject("user", customerService.findByUsername(customerDetails.getUsername()));
    modelAndView.addObject("paymentcard", paymentService.findById(username));

    modelAndView.addObject("address", addressService.findById(customerService.findByUsername(customerDetails.getUsername()).getAddressID()));
   
   
    modelAndView.setViewName("viewprofile");
    return modelAndView;
  }




    // Used to point to url containing the customer's username
    @RequestMapping(value = "/editprofile")
    public ModelAndView viewEditProfile(@AuthenticationPrincipal MyUserDetails customerDetails, ModelAndView modelAndView, BindingResult bindingResult) {
      modelAndView.setViewName("redirect:/editprofile/" + customerDetails.getUsername());
      return modelAndView;
    }
  
    @RequestMapping(value = "/editprofile/{username}", method = RequestMethod.GET)
    public ModelAndView loadEditProfile(@PathVariable("username") String username, @AuthenticationPrincipal MyUserDetails customerDetails, Model model ,ModelAndView modelAndView, BindingResult bindingResult) {
      modelAndView.setViewName("editprofile");
      return modelAndView;
    }

    @RequestMapping(value = "/editprofile/{username}", method = RequestMethod.POST)
    public ModelAndView saveEditProfile(@PathVariable("username") String username, @AuthenticationPrincipal MyUserDetails customerDetails, Model model ,ModelAndView modelAndView, BindingResult bindingResult, String firstname, String lastname, String phone_number, String street, String city, String state, Integer zipcode, String country, String type, String exp_date) {
  
      User user = customerService.findByUsername(username);

      Address address = addressService.findById(user.getAddressID());
      Paymentcard paymentcard = paymentService.findById(username);
      if(!(firstname.equals(""))){
        user.setFirstname(firstname);
      }

      if(!(lastname.equals(""))){
        user.setLastname(lastname);
      }
      
      if(!(phone_number.equals(""))){
        user.setPhone_number(phone_number);
      }
      if(!(street.equals(""))){
        address.setStreet(street);
      }
      if(!(city.equals(""))){
        address.setCity(city);
      }
      if(!(state.equals(""))){
        address.setState(state);
      }
      if(zipcode != null){
        address.setZipcode(zipcode);
      }
      if(!(type.equals(""))){
        paymentcard.setType(type);
      }
      if(!(exp_date.equals(""))){
        paymentcard.setExp_date(exp_date);
      }
      customerService.saveCustomer(user);
      modelAndView.setViewName("redirect:/user");
      return modelAndView;
    }
















  @RequestMapping(value = "/cart", method = RequestMethod.GET)
  public ModelAndView loadCart(ModelAndView modelAndView, @AuthenticationPrincipal MyUserDetails customerDetails, BindingResult bindingResult) {

    List<Cart_item> itemlist = cart_itemService.findAllByIdCartid(customerDetails.getCart_id());
    Book books[] = new Book[itemlist.size()]; // Also need list of books to display cover pic, title, etc...

    // Get books from cart_items and calculate total price of cart
    int i = 0;
    int totalprice = 0;
    int numresults = 0;
    for(Cart_item cart_item : itemlist){
      Book book = bookService.findById(cart_item.getId().getBook_id());
      books[i] = book;
      totalprice += (book.getPrice() * cart_item.getQuantity());
      numresults += cart_item.getQuantity();
      i++;
    }

    
    



    modelAndView.addObject("totalprice", totalprice);
    modelAndView.addObject("books", books);
    modelAndView.addObject("itemlist", itemlist);
    modelAndView.addObject("numresults", numresults);
    modelAndView.setViewName("cart");
    return modelAndView;
  }


  @RequestMapping(value = "/orderhistory", method = RequestMethod.GET)
  public ModelAndView loadOrderHistory(ModelAndView modelAndView, BindingResult bindingResult, @AuthenticationPrincipal MyUserDetails customerDetails) {

    List<Order> orders = orderService.findOrdersByUsername(customerDetails.getUsername());
    List<List<Book>> booklist = new ArrayList<List<Book>>();

    List<List<Integer>> qtylist = new ArrayList<List<Integer>>();

 
    for(Order order: orders){
      List<Order_record> records = order_recordService.findAllByIdOrderid(order.getId());
      List<Book> books = new ArrayList<Book>();
      List<Integer> qty = new ArrayList<Integer>();
      
     
      for(Order_record record: records){
        Book book = bookService.findById(record.getBookid());
        books.add(book);
        qty.add(record.getQuantity()) ;
      
      }
      booklist.add(books);
      qtylist.add(qty);
     
  
    }

    
    modelAndView.addObject("orders", orders);
    modelAndView.addObject("booklist", booklist);
    modelAndView.addObject("qtylist", qtylist);

    
   


    modelAndView.addObject("numorders", orders.size());
    modelAndView.addObject("user", customerDetails.getUser());
    modelAndView.setViewName("orderhistory");
    return modelAndView;
  }

  @RequestMapping(value = "/verify", method = RequestMethod.GET)
  public ModelAndView loadVerificationPage(ModelAndView modelAndView, BindingResult bindingResult, @RequestParam(value = "token", required = false) String token, @RequestParam(value = "error", required = false) String errorMessage) {
    modelAndView.setViewName("verify");

    if(token != null){
      modelAndView.addObject("token", token);
    }
    if(errorMessage != null){
      modelAndView.addObject("errorMessage", errorMessage);
    }
    
    return modelAndView;
  }

// @AuthenticationPrincipal MyUserDetails customerDetails

  @RequestMapping(value = "/confirm", method = RequestMethod.POST)
  public ModelAndView loadEmailConfirmation(ModelAndView modelAndView, @RequestParam(value = "token") String token, @RequestParam(value = "email") String email){

    // Get user associated with this email address
    Optional<User> optional = customerService.findUserByEmail(email);
    User customer = null;

    boolean matches = false;

    if(optional.isPresent()){
      customer = optional.get();

      if(customer.getConfirmationToken().equals(token)){                // provided token/email match a registered user
        matches = true;
      }
    }

    if(!matches){
      //modelAndView.addObject("errorMessage", "Invalid token/email combination");
      modelAndView.addObject("token", token);
      modelAndView.addObject("error", "Invalid token/email combination");
      modelAndView.setViewName("redirect:/verify");                         // redirect back to verification page with same token provided
      return modelAndView;
    }

    // Create a cart for registered user
    Cart cart = new Cart();
    cartService.saveCart(cart);
    customer.setCart_id(cart.getId());
    
    

    
      customer.setUserstatus_id(2);
      customer.setConfirmationToken(null); // prevent user from reverifying email (can be used to bypass suspension by administrators)
      customerService.saveCustomer(customer); 
      System.out.println("Updated user " +  customer.getUsername()  + "'s status to active!");
    
    modelAndView.addObject("successMessage", "Your email address has been verified!");

    modelAndView.setViewName("verify");
    //System.out.println(confirmation_token);
   

    return modelAndView;

  }


  // Display forgotPassword page
	@RequestMapping(value = "/forgot", method = RequestMethod.GET)
	public ModelAndView displayForgotPasswordPage() {
		return new ModelAndView("forgot");
    }
    
    // Process form submission from forgotPassword page
	@RequestMapping(value = "/forgot", method = RequestMethod.POST)
	public ModelAndView processForgotPasswordForm(ModelAndView modelAndView, @RequestParam("email") String email, HttpServletRequest request) {
		
		// Lookup user in database by e-mail
		Optional<User> optional = customerService.findUserByEmail(email);

		if (!optional.isPresent()) {
			modelAndView.addObject("errorMessage", "We didn't find an account for that e-mail address.");
		} else {
			
			// Generate random 36-character string token for reset password 
			User user = optional.get();
			user.setResetToken(UUID.randomUUID().toString());

			// Save token to database
			customerService.saveCustomer(user);

			String appUrl = request.getScheme() + "://" + request.getServerName();
			
			// Email message
			SimpleMailMessage passwordResetEmail = new SimpleMailMessage();
			passwordResetEmail.setFrom("support@demo.com");
			passwordResetEmail.setTo(user.getEmail());
			passwordResetEmail.setSubject("Password Reset Request");
			passwordResetEmail.setText("To reset your password, click the link below:\n" + appUrl
					+ ":8080/reset?token=" + user.getResetToken());
			
			emailService.sendEmail(passwordResetEmail);

			// Add success message to view
			modelAndView.addObject("successMessage", "A password reset link has been sent to " + email);
		}

		modelAndView.setViewName("forgot");
		return modelAndView;

	}

	// Display form to reset password
	@RequestMapping(value = "/reset", method = RequestMethod.GET)
	public ModelAndView displayResetPasswordPage(ModelAndView modelAndView, @RequestParam("token") String token) {
		
		Optional<User> user = customerService.findUserByResetToken(token);

		if (user.isPresent()) { // Token found in DB
			modelAndView.addObject("resetToken", token);
		} else { // Token not found in DB
			modelAndView.addObject("errorMessage", "Oops!  This is an invalid password reset link.");
		}

		modelAndView.setViewName("reset");
		return modelAndView;
	}

	// Process reset password form
	@RequestMapping(value = "/reset", method = RequestMethod.POST)
	public ModelAndView setNewPassword(ModelAndView modelAndView, @RequestParam Map<String, String> requestParams, RedirectAttributes redir) {

		// Find the user associated with the reset token
		Optional<User> user = customerService.findUserByResetToken(requestParams.get("token"));

		// This should always be non-null but we check just in case
		if (user.isPresent()) {
			
			User resetUser = user.get(); 
            
			// Set new password    
            resetUser.setPassword(bCryptPasswordEncoder.encode(requestParams.get("password")));
            
			// Set the reset token to null so it cannot be used again
			resetUser.setResetToken(null);

			// Save user
			customerService.saveCustomer(resetUser);

			// In order to set a model attribute on a redirect, we must use
			// RedirectAttributes
			redir.addFlashAttribute("successMessage", "You have successfully reset your password.  You may now login.");

			modelAndView.setViewName("redirect:login");
			return modelAndView;
			
		} else {
			modelAndView.addObject("errorMessage", "Oops!  This is an invalid password reset link.");
			modelAndView.setViewName("reset");	
		}
		
		return modelAndView;
   }



}